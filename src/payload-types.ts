/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    pages: Page;
    verreries: Verrery;
    verriers: Verrier;
    'types-de-production': TypesDeProduction;
    engagements: Engagement;
    'evenements-biographiques': EvenementsBiographique;
    lieux: Lieux;
    'fonctions-verriers': FonctionsVerrier;
    'fonctions-personnalites': FonctionsPersonnalite;
    histoires: Histoire;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    verreries: VerreriesSelect<false> | VerreriesSelect<true>;
    verriers: VerriersSelect<false> | VerriersSelect<true>;
    'types-de-production': TypesDeProductionSelect<false> | TypesDeProductionSelect<true>;
    engagements: EngagementsSelect<false> | EngagementsSelect<true>;
    'evenements-biographiques': EvenementsBiographiquesSelect<false> | EvenementsBiographiquesSelect<true>;
    lieux: LieuxSelect<false> | LieuxSelect<true>;
    'fonctions-verriers': FonctionsVerriersSelect<false> | FonctionsVerriersSelect<true>;
    'fonctions-personnalites': FonctionsPersonnalitesSelect<false> | FonctionsPersonnalitesSelect<true>;
    histoires: HistoiresSelect<false> | HistoiresSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: 'fr' | 'en';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "verreries".
 */
export interface Verrery {
  id: number;
  nomPrincipal: string;
  slug: string;
  statutActuel?:
    | ('enActivite' | 'fermeeVestigesVisibles' | 'enRuines' | 'disparueSansVestiges' | 'convertie' | 'inconnu')
    | null;
  notesStatutVestiges?: string | null;
  nomsAlternatifs?:
    | {
        typeDeNom?: ('raisonSociale' | 'nomUsage' | 'nomMaitreVerrier' | 'nomLieuDit' | 'autre') | null;
        nom: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Définissez la période d'activité principale de cet établissement verrier.
   */
  periodeVerriere?: {
    /**
     * Ex: "de 1780 à 1950 environ", "actif au XIXe siècle", "fondée vers 1750"
     */
    periodeActiviteTexte?: string | null;
    anneeFondationApprox?: number | null;
    anneeFermetureApprox?: number | null;
    anneeDebutSort?: number | null;
    moisDebutSort?: number | null;
    typePrecisionDateDebut?: ('MoisAnneeExacts' | 'AnneeSeuleExacte' | 'CircaAnnee') | null;
    anneeFinSort?: number | null;
    moisFinSort?: number | null;
    typePrecisionDateFin?: ('MoisAnneeExacts' | 'AnneeSeuleExacte' | 'CircaAnnee') | null;
  };
  /**
   * Listez les différents noms et raisons sociales de la verrerie au fil du temps, avec leurs périodes.
   */
  nomsHistoriquesEtRaisonsSociales?:
    | {
        nom: string;
        typeDeNom?: ('usage' | 'raison_sociale' | 'fondation' | 'populaire' | 'autre') | null;
        /**
         * Ex: "1749-1792", "vers 1880"
         */
        periodeValidite?: string | null;
        anneeDebut?: number | null;
        anneeFin?: number | null;
        notes?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Personnalités ayant fondé cet établissement.
   */
  fondateurs?: (number | Verrier)[] | null;
  dateDeCreation?: {
    datePreciseCreation?: string | null;
    descriptionDateCreation?: string | null;
  };
  dateDeFermeture?: {
    datePreciseFermeture?: string | null;
    descriptionDateFermeture?: string | null;
  };
  /**
   * Sélectionnez ou créez le lieu où cette verrerie est (ou était) implantée.
   */
  lieuPrincipal: number | Lieux;
  /**
   * Liez ici les personnalités (directeurs, etc.) et les verriers (ouvriers, artisans) avec leurs fonctions et périodes spécifiques à cette verrerie.
   */
  engagements?: (number | Engagement)[] | null;
  typesDeProduction?: (number | TypesDeProduction)[] | null;
  imagesEtMedias?: (number | Media)[] | null;
  sourcesBibliographiques?:
    | {
        typeSource?: ('livre' | 'article' | 'siteWeb' | 'archive' | 'entretien' | 'autre') | null;
        titre?: string | null;
        auteur?: string | null;
        url?: string | null;
        detailsPublication?: string | null;
        citationOuExtrait?: string | null;
        notesSource?: string | null;
        id?: string | null;
      }[]
    | null;
  histoire?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  techniquesInnovations?: string | null;
  aspectsSociaux?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "verriers".
 */
export interface Verrier {
  id: number;
  nom: string;
  prenom?: string | null;
  /**
   * Généré automatiquement à partir du prénom et du nom si laissé vide, ou peut être saisi manuellement.
   */
  nomComplet?: string | null;
  /**
   * Pour l'accord grammatical (Né/Née, etc.).
   */
  sexe?: ('M' | 'F') | null;
  slug?: string | null;
  /**
   * Le rôle le plus significatif de cette personne, au-delà de ses fonctions techniques. Utile pour qualifier les 'personnalités'.
   */
  rolePrincipal?:
    | (
        | 'fondateur'
        | 'maitre_verrerie'
        | 'directeur'
        | 'ingenieur_technicien'
        | 'maitre_verrier_expertise'
        | 'artiste_decorateur'
        | 'autre'
      )
    | null;
  /**
   * Ex: "vers 1787", "le 12/03/1850", "avant 1800"
   */
  dateDeNaissance?: string | null;
  /**
   * Sélectionnez le lieu de naissance si connu.
   */
  lieuDeNaissance?: (number | null) | Lieux;
  /**
   * Ex: "vers 1820", "le 01/10/1899", "après 1870"
   */
  dateDeDeces?: string | null;
  /**
   * Sélectionnez le lieu de décès si connu.
   */
  lieuDeDeces?: (number | null) | Lieux;
  /**
   * Année seulement, ex: 1855. Utile pour distinguer les homonymes.
   */
  anneeNaissance?: number | null;
  /**
   * Année seulement, ex: 1939.
   */
  anneeDeces?: number | null;
  periodePrincipaleActivite?: string | null;
  specialisation?: string | null;
  notesBiographie?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Cochez cette case si cette personne est un de vos ancêtres directs.
   */
  ancetreDirect?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lieux".
 */
export interface Lieux {
  id: number;
  /**
   * Catégorise le lieu pour faciliter les recherches et l'affichage.
   */
  typeDeLieu?: ('site_verrier' | 'siege_social' | 'habitation' | 'culte' | 'public' | 'autre') | null;
  nomDuLieu?: string | null;
  adresse?: string | null;
  /**
   * Ex: Rive-de-Gier, Givors, Saint-Étienne
   */
  villeOuCommune: string;
  codePostal?: string | null;
  /**
   * Ex: Loire, Rhône
   */
  departement?: string | null;
  /**
   * Ex: Auvergne-Rhône-Alpes
   */
  region?: string | null;
  pays: 'France' | 'Allemagne' | 'Suisse' | 'Italie';
  /**
   * Cliquez sur la carte pour définir le point, ou entrez manuellement longitude puis latitude.
   *
   * @minItems 2
   * @maxItems 2
   */
  coordonnees: [number, number];
  notesHistoriquesSurLeLieu?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  nomCompletAffichage?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Définit le rôle ou le métier d'une personne dans une verrerie sur une période donnée.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "engagements".
 */
export interface Engagement {
  id: number;
  /**
   * Titre généré automatiquement pour l’admin.
   */
  titreAdmin?: string | null;
  verrerie: number | Verrery;
  personneConcernee: number | Verrier;
  /**
   * Précise si l'engagement est un rôle de direction/propriété ou un métier d'artisan/ouvrier.
   */
  typeEngagement: 'role_personnalite' | 'metier_verrier';
  fonctionVerrier?: (number | null) | FonctionsVerrier;
  fonctionPersonnalite?: (number | null) | FonctionsPersonnalite;
  dateDebutStructurée?: {
    anneeDebutSort?: number | null;
    moisDebutSort?: number | null;
    typePrecisionDateDebut?:
      | ('AnneeSeuleExacte' | 'CircaAnnee' | 'ApresAnnee' | 'AvantAnnee' | 'MoisAnneeExacts')
      | null;
  };
  dateFinStructurée?: {
    anneeFinSort?: number | null;
    moisFinSort?: number | null;
    typePrecisionDateFin?: ('AnneeSeuleExacte' | 'CircaAnnee' | 'ApresAnnee' | 'AvantAnnee' | 'MoisAnneeExacts') | null;
  };
  descriptionEngagement?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Liste des métiers spécifiques aux verriers (ouvriers, artisans).
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fonctions-verriers".
 */
export interface FonctionsVerrier {
  id: number;
  /**
   * Exemple: Souffleur de verre, Gamin, Tiseur, etc.
   */
  nom: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * Liste des rôles pour les personnalités (direction, cadres, etc.).
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fonctions-personnalites".
 */
export interface FonctionsPersonnalite {
  id: number;
  /**
   * Exemple: Directeur, Associé, Maître de verrerie (cadre), etc.
   */
  nom: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "types-de-production".
 */
export interface TypesDeProduction {
  id: number;
  nom: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  verreriesProductrices?: (number | Verrery)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Enregistre les événements marquants de la vie d'une personne (naissance, mariage, décès, etc.).
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "evenements-biographiques".
 */
export interface EvenementsBiographique {
  id: number;
  personneConcernee: number | Verrier;
  typeEvenement: 'naissance' | 'bapteme' | 'mariage' | 'deces' | 'inhumation' | 'mention_acte' | 'autre';
  /**
   * Ex: "Le 12 mars 1850", "Vers 1788", "Au printemps 1820"
   */
  dateEvenementTexte?: string | null;
  dateStructureeEvenement: {
    anneeSort: number;
    moisSort?: number | null;
    jourSort?: number | null;
    typePrecisionDate?:
      | ('JourMoisAnneeExacts' | 'MoisAnneeExacts' | 'AnneeSeuleExacte' | 'CircaAnnee' | 'AvantDate' | 'ApresDate')
      | null;
  };
  /**
   * Sélectionnez le lieu où l'événement s'est produit.
   */
  lieu?: (number | null) | Lieux;
  descriptionEvenement?: string | null;
  titreEvenementPourAdmin?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Articles de fond, récits sur les dynasties, les régions, ou les aventures verrières.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "histoires".
 */
export interface Histoire {
  id: number;
  title: string;
  typeArticle?: ('groupe_verreries' | 'aventure_verriere' | 'dynastie_verriere' | 'region_verriere') | null;
  resume?: string | null;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Personnes clés mentionnées dans cette histoire. Elles apparaîtront dans un bloc dédié.
   */
  personnesLiees?: (number | Verrier)[] | null;
  /**
   * Verreries clés mentionnées. Elles pourront être affichées sur une carte contextuelle.
   */
  verreriesLiees?: (number | Verrery)[] | null;
  imageMiseEnAvant?: (number | null) | Media;
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'verreries';
        value: number | Verrery;
      } | null)
    | ({
        relationTo: 'verriers';
        value: number | Verrier;
      } | null)
    | ({
        relationTo: 'types-de-production';
        value: number | TypesDeProduction;
      } | null)
    | ({
        relationTo: 'engagements';
        value: number | Engagement;
      } | null)
    | ({
        relationTo: 'evenements-biographiques';
        value: number | EvenementsBiographique;
      } | null)
    | ({
        relationTo: 'lieux';
        value: number | Lieux;
      } | null)
    | ({
        relationTo: 'fonctions-verriers';
        value: number | FonctionsVerrier;
      } | null)
    | ({
        relationTo: 'fonctions-personnalites';
        value: number | FonctionsPersonnalite;
      } | null)
    | ({
        relationTo: 'histoires';
        value: number | Histoire;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "verreries_select".
 */
export interface VerreriesSelect<T extends boolean = true> {
  nomPrincipal?: T;
  slug?: T;
  statutActuel?: T;
  notesStatutVestiges?: T;
  nomsAlternatifs?:
    | T
    | {
        typeDeNom?: T;
        nom?: T;
        id?: T;
      };
  periodeVerriere?:
    | T
    | {
        periodeActiviteTexte?: T;
        anneeFondationApprox?: T;
        anneeFermetureApprox?: T;
        anneeDebutSort?: T;
        moisDebutSort?: T;
        typePrecisionDateDebut?: T;
        anneeFinSort?: T;
        moisFinSort?: T;
        typePrecisionDateFin?: T;
      };
  nomsHistoriquesEtRaisonsSociales?:
    | T
    | {
        nom?: T;
        typeDeNom?: T;
        periodeValidite?: T;
        anneeDebut?: T;
        anneeFin?: T;
        notes?: T;
        id?: T;
      };
  fondateurs?: T;
  dateDeCreation?:
    | T
    | {
        datePreciseCreation?: T;
        descriptionDateCreation?: T;
      };
  dateDeFermeture?:
    | T
    | {
        datePreciseFermeture?: T;
        descriptionDateFermeture?: T;
      };
  lieuPrincipal?: T;
  engagements?: T;
  typesDeProduction?: T;
  imagesEtMedias?: T;
  sourcesBibliographiques?:
    | T
    | {
        typeSource?: T;
        titre?: T;
        auteur?: T;
        url?: T;
        detailsPublication?: T;
        citationOuExtrait?: T;
        notesSource?: T;
        id?: T;
      };
  histoire?: T;
  techniquesInnovations?: T;
  aspectsSociaux?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "verriers_select".
 */
export interface VerriersSelect<T extends boolean = true> {
  nom?: T;
  prenom?: T;
  nomComplet?: T;
  sexe?: T;
  slug?: T;
  rolePrincipal?: T;
  dateDeNaissance?: T;
  lieuDeNaissance?: T;
  dateDeDeces?: T;
  lieuDeDeces?: T;
  anneeNaissance?: T;
  anneeDeces?: T;
  periodePrincipaleActivite?: T;
  specialisation?: T;
  notesBiographie?: T;
  ancetreDirect?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "types-de-production_select".
 */
export interface TypesDeProductionSelect<T extends boolean = true> {
  nom?: T;
  description?: T;
  verreriesProductrices?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "engagements_select".
 */
export interface EngagementsSelect<T extends boolean = true> {
  titreAdmin?: T;
  verrerie?: T;
  personneConcernee?: T;
  typeEngagement?: T;
  fonctionVerrier?: T;
  fonctionPersonnalite?: T;
  dateDebutStructurée?:
    | T
    | {
        anneeDebutSort?: T;
        moisDebutSort?: T;
        typePrecisionDateDebut?: T;
      };
  dateFinStructurée?:
    | T
    | {
        anneeFinSort?: T;
        moisFinSort?: T;
        typePrecisionDateFin?: T;
      };
  descriptionEngagement?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "evenements-biographiques_select".
 */
export interface EvenementsBiographiquesSelect<T extends boolean = true> {
  personneConcernee?: T;
  typeEvenement?: T;
  dateEvenementTexte?: T;
  dateStructureeEvenement?:
    | T
    | {
        anneeSort?: T;
        moisSort?: T;
        jourSort?: T;
        typePrecisionDate?: T;
      };
  lieu?: T;
  descriptionEvenement?: T;
  titreEvenementPourAdmin?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lieux_select".
 */
export interface LieuxSelect<T extends boolean = true> {
  typeDeLieu?: T;
  nomDuLieu?: T;
  adresse?: T;
  villeOuCommune?: T;
  codePostal?: T;
  departement?: T;
  region?: T;
  pays?: T;
  coordonnees?: T;
  notesHistoriquesSurLeLieu?: T;
  nomCompletAffichage?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fonctions-verriers_select".
 */
export interface FonctionsVerriersSelect<T extends boolean = true> {
  nom?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fonctions-personnalites_select".
 */
export interface FonctionsPersonnalitesSelect<T extends boolean = true> {
  nom?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "histoires_select".
 */
export interface HistoiresSelect<T extends boolean = true> {
  title?: T;
  typeArticle?: T;
  resume?: T;
  content?: T;
  personnesLiees?: T;
  verreriesLiees?: T;
  imageMiseEnAvant?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}